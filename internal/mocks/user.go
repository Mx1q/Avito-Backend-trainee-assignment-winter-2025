// Code generated by MockGen. DO NOT EDIT.
// Source: internal/entity/user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "Avito-Backend-trainee-assignment-winter-2025/internal/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// GetCoinsHistory mocks base method.
func (m *MockIUserRepository) GetCoinsHistory(ctx context.Context, username string) (int32, *entity.CoinsHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinsHistory", ctx, username)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(*entity.CoinsHistory)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCoinsHistory indicates an expected call of GetCoinsHistory.
func (mr *MockIUserRepositoryMockRecorder) GetCoinsHistory(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinsHistory", reflect.TypeOf((*MockIUserRepository)(nil).GetCoinsHistory), ctx, username)
}

// SendCoins mocks base method.
func (m *MockIUserRepository) SendCoins(ctx context.Context, transfer *entity.TransferCoins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoins", ctx, transfer)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoins indicates an expected call of SendCoins.
func (mr *MockIUserRepositoryMockRecorder) SendCoins(ctx, transfer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoins", reflect.TypeOf((*MockIUserRepository)(nil).SendCoins), ctx, transfer)
}

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// GetCoinsHistory mocks base method.
func (m *MockIUserService) GetCoinsHistory(ctx context.Context, username string) (int32, *entity.CoinsHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinsHistory", ctx, username)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(*entity.CoinsHistory)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCoinsHistory indicates an expected call of GetCoinsHistory.
func (mr *MockIUserServiceMockRecorder) GetCoinsHistory(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinsHistory", reflect.TypeOf((*MockIUserService)(nil).GetCoinsHistory), ctx, username)
}

// SendCoins mocks base method.
func (m *MockIUserService) SendCoins(ctx context.Context, transfer *entity.TransferCoins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoins", ctx, transfer)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoins indicates an expected call of SendCoins.
func (mr *MockIUserServiceMockRecorder) SendCoins(ctx, transfer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoins", reflect.TypeOf((*MockIUserService)(nil).SendCoins), ctx, transfer)
}
