// Code generated by MockGen. DO NOT EDIT.
// Source: internal/entity/item.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "Avito-Backend-trainee-assignment-winter-2025/internal/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIItemRepository is a mock of IItemRepository interface.
type MockIItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIItemRepositoryMockRecorder
}

// MockIItemRepositoryMockRecorder is the mock recorder for MockIItemRepository.
type MockIItemRepositoryMockRecorder struct {
	mock *MockIItemRepository
}

// NewMockIItemRepository creates a new mock instance.
func NewMockIItemRepository(ctrl *gomock.Controller) *MockIItemRepository {
	mock := &MockIItemRepository{ctrl: ctrl}
	mock.recorder = &MockIItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIItemRepository) EXPECT() *MockIItemRepositoryMockRecorder {
	return m.recorder
}

// BuyItem mocks base method.
func (m *MockIItemRepository) BuyItem(ctx context.Context, purchase *entity.Purchase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItem", ctx, purchase)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyItem indicates an expected call of BuyItem.
func (mr *MockIItemRepositoryMockRecorder) BuyItem(ctx, purchase interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItem", reflect.TypeOf((*MockIItemRepository)(nil).BuyItem), ctx, purchase)
}

// GetInventory mocks base method.
func (m *MockIItemRepository) GetInventory(ctx context.Context, username string) ([]*entity.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventory", ctx, username)
	ret0, _ := ret[0].([]*entity.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventory indicates an expected call of GetInventory.
func (mr *MockIItemRepositoryMockRecorder) GetInventory(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventory", reflect.TypeOf((*MockIItemRepository)(nil).GetInventory), ctx, username)
}

// MockIItemService is a mock of IItemService interface.
type MockIItemService struct {
	ctrl     *gomock.Controller
	recorder *MockIItemServiceMockRecorder
}

// MockIItemServiceMockRecorder is the mock recorder for MockIItemService.
type MockIItemServiceMockRecorder struct {
	mock *MockIItemService
}

// NewMockIItemService creates a new mock instance.
func NewMockIItemService(ctrl *gomock.Controller) *MockIItemService {
	mock := &MockIItemService{ctrl: ctrl}
	mock.recorder = &MockIItemServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIItemService) EXPECT() *MockIItemServiceMockRecorder {
	return m.recorder
}

// BuyItem mocks base method.
func (m *MockIItemService) BuyItem(ctx context.Context, purchase *entity.Purchase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItem", ctx, purchase)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyItem indicates an expected call of BuyItem.
func (mr *MockIItemServiceMockRecorder) BuyItem(ctx, purchase interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItem", reflect.TypeOf((*MockIItemService)(nil).BuyItem), ctx, purchase)
}

// GetInventory mocks base method.
func (m *MockIItemService) GetInventory(ctx context.Context, username string) ([]*entity.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventory", ctx, username)
	ret0, _ := ret[0].([]*entity.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventory indicates an expected call of GetInventory.
func (mr *MockIItemServiceMockRecorder) GetInventory(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventory", reflect.TypeOf((*MockIItemService)(nil).GetInventory), ctx, username)
}
